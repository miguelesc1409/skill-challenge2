/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package frames;

/**
 *
 * @author mych7
 */


import java.sql.Statement;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.util.LinkedList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.DefaultTableModel;
        



public class calculo extends javax.swing.JFrame {
String url = "jdbc:sqlite:C:\\Users\\mych7\\Downloads\\moises\\datos.db";
Connection connect;
/**
     * Creates new form calculo
     */
    public calculo(int modo, int id) {
        
        
        
        initComponents();
        
        pruebas(modo,id);
        
        tabla();
    }
    
    
    
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblCalculo = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        btnBuscar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        tblCalculo.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "N.", "Nombre", "S. nombre", "Apellido", "Apellido 2", "Habito", "Género", "Plan", "Plazo"
            }
        ));
        jScrollPane1.setViewportView(tblCalculo);

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 80, 680, 330));

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("----");
        jLabel1.setToolTipText("");
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 20, 250, 40));

        btnBuscar.setText("Buscar");
        btnBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarActionPerformed(evt);
            }
        });
        jPanel1.add(btnBuscar, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 30, -1, -1));
        try{        
connect = DriverManager.getConnection(url);
} catch (SQLException ex) {
        Logger.getLogger(calculo.class.getName()).log(Level.SEVERE, null, ex);
    }
      
        btnBuscar.getAccessibleContext().setAccessibleName("btnBuscar");

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 710, 441));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarActionPerformed
        // TODO add your handling code here:
        Buscar bs = new Buscar();
        
        bs.setVisible(true);
        
    }//GEN-LAST:event_btnBuscarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(calculo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(calculo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(calculo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(calculo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                System.out.println("se reinicio");
                new calculo(0,0).setVisible(true);
                
                
                
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBuscar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblCalculo;
    // End of variables declaration//GEN-END:variables

    private void pruebas(int modo, int id) {
        
        // Adaptación de tabla hash
        LinkedList<Object[]> myList = new LinkedList<>();
        
        String sql;
        
            sql = "SELECT * from VWgeneral2";

        Statement statemen;
        
        
    try {
        statemen = connect.createStatement();
        ResultSet resultSet = statemen.executeQuery(sql);
        
        ResultSetMetaData metaData = resultSet.getMetaData();
int columnCount = metaData.getColumnCount();
int c = 0;

    while (resultSet.next()) {
        Object[] c1 = new Object[9];
        for (int i = 1; i <= columnCount; i++) {
            Object value = resultSet.getObject(i);
            c1[i-1] = value;
            //System.out.println(value);
            //System.out.print(value + "\t");

        }


        myList.add(c1);
    }  

        /*
         
            while (resultSet.next()) {
                // Aquí puedes obtener los datos de cada fila
                c1[0] = resultSet.getString("id_cliente");
                c1[1] = resultSet.getString("nombre");
                c1[2] = resultSet.getString("segundo_nombre");
                c1[3] = resultSet.getString("primer_apellido");
                c1[4] = resultSet.getInt("habito");
                c1[5] = resultSet.getString("genero");
                c1[6] = resultSet.getString("plan");
                c1[7] = resultSet.getString("plazo");
                

                // Haz algo con los datos...
                myList.add(c1);
                
                c1[0]=3;
            }*/
            
        // Inicio del tiempo de ejecución
        long inicio = System.nanoTime();

         // Ordena la lista utilizando Quicksort
        myList = quickSort(myList, 0, myList.size() - 1);

        // Fin del tiempo de ejecución
        long fin = System.nanoTime();

        // Cálculo del tiempo transcurrido en nanosegundos
        long tiempoTranscurrido = fin - inicio;

        System.out.println("Quicksort\nTiempo de ejecución: " + tiempoTranscurrido + " ns");

        
        
        if(modo==1){
            buscar(id,myList);
        }else{
            
            // Crear el árbol con la raíz "Root Node"
            TreeNode tree = new TreeNode("Usuario");
            for (Object[] tuple : myList) {
                DefaultTableModel model = (DefaultTableModel) tblCalculo.getModel();
                model.addRow(tuple);
                tree.addLeaf(tuple);
            }
            
            System.out.println(tree);
        }
            // Imprimir las tuplas
        
        
       
        
        
        
        
        
        
    } catch (SQLException ex) {
        Logger.getLogger(calculo.class.getName()).log(Level.SEVERE, null, ex);
    }
        
    }

    private void tabla() {
         
   }
    
    public static LinkedList<Object[]> quickSort(LinkedList<Object[]> list, int low, int high) {
        if (low < high) {
            int pi = partition(list, low, high);
            quickSort(list, low, pi - 1);
            quickSort(list, pi + 1, high);
        }
        
        return list;
    }

    private static int partition(LinkedList<Object[]> list, int low, int high) {
        Object pivot = list.get(high)[0]; // pivote es el elemento 0 de la última tupla
        int i = low - 1;
        for (int j = low; j < high; j++) {
            if ((int) list.get(j)[0] < (int) pivot) { // cambiar > a < para ordenar de menor a mayor
                i++;
                swap(list, i, j);
            }
        }
        swap(list, i + 1, high);
        return i + 1;
    }

    private static void swap(LinkedList<Object[]> list, int i, int j) {
        Object[] temp = list.get(i);
        list.set(i, list.get(j));
        list.set(j, temp);
    }

    private void buscar(int id, LinkedList<Object[]> myList) {
        
        // Inicio del tiempo de ejecución
        long inicio = System.nanoTime();
        
        System.out.println("inicia buscar con id "+id);
        
            int position = binarySearch(myList, id);

        // Mostrar el resultado
        if (position != -1) {
            System.out.println("El id " + id + " se encuentra en la posición " + position + " de la LinkedList.");
        } else {
            System.out.println("El id " + id + " no se encuentra en la LinkedList.");
        }
        
        // Fin del tiempo de ejecución
        long fin = System.nanoTime();

        // Cálculo del tiempo transcurrido en nanosegundos
        long tiempoTranscurrido = fin - inicio;

        System.out.println("Busqueda binaria\nTiempo de ejecución: " + tiempoTranscurrido + " ns");
        
        DefaultTableModel model = (DefaultTableModel) tblCalculo.getModel();
        
        model.addRow(myList.get(position));
        /*
        // Crear el árbol con la raíz "Root Node"
            TreeNode tree = new TreeNode("Usuario");
            for (Object[] tuple : myList2) {
                DefaultTableModel model = (DefaultTableModel) tblCalculo.getModel();
                model.addRow(tuple);
                tree.addLeaf(tuple);
            }
            
            System.out.println(tree);*/
    }
    
    // Método de búsqueda binaria
    public static int binarySearch(LinkedList<Object[]> list, int targetId) {
        int left = 0;
        int right = list.size() - 1;

        while (left <= right) {
            int mid = left + (right - left) / 2;
            int midId = (int) list.get(mid)[0];
            System.out.println(midId);

            if (midId == targetId) {
                return mid; // Id encontrado, retorna la posición
            } else if (midId < targetId) {
                left = mid + 1;
            } else {
                right = mid - 1;
            }
        }

        return -1; // Id no encontrado
    }
}
